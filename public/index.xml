<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Yo blog</title>
        <link>https://yotom131.github.io/</link>
        <description>Recent content on Yo blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 02 Apr 2024 14:01:26 +0800</lastBuildDate><atom:link href="https://yotom131.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>2024.3.23</title>
        <link>https://yotom131.github.io/post/2024.3.23/</link>
        <pubDate>Tue, 02 Apr 2024 14:01:26 +0800</pubDate>
        
        <guid>https://yotom131.github.io/post/2024.3.23/</guid>
        <description>&lt;h3 id=&#34;323日记&#34;&gt;
    &lt;a href=&#34;#323%e6%97%a5%e8%ae%b0&#34;&gt;#&lt;/a&gt;
    3.23日记
&lt;/h3&gt;&lt;p&gt;距离腾讯测试开发岗位还有两天不到的时间，现在内心十分紧张，因为技术栈并不多，项目也并没有很匹配。目前主要要求的三个科目是计算机网络、操作系统、算法与数据结构。&lt;/p&gt;
&lt;p&gt;今天学的内容是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;快速排序、插入排序、希尔排序。快速排序主要思路是找到一个基准值，将大于他的和小于他的放在值得两边。插入排序就像斗地主一样，从第二张牌开始，每次从右往左跟左边比大小，小就往左边换，直到把最右边的值放在合适的位置。希尔排序主题思路与插入排序是一致的，主要区别在于把值分成了多组，用gap来一组组分好位置，当gap为1时，就是插入排序本身。&lt;/li&gt;
&lt;li&gt;二叉树的中序遍历。这是力扣的一道题目。重温了vector的使用，和树的结点构造。大体上了解了构造函数的意义，以及中序遍历两种实现思路：递归和迭代。递归每次把左子放入函数，中间存自身，最后放右子即可。迭代则需要一个栈，用来模拟中序遍历的过程，每次空了，就弹出栈顶，记录值，最后返回值即可。&lt;/li&gt;
&lt;li&gt;两数之和。这是力扣100的第一题，可以经典的两轮遍历做出来。也可以用hash表来做，对于每一个数值，通过auto it = hash.find(target - nums[i])，判断it值是否是hash.end()来看是否找到了合适的值。顺带了解了，map是有序的，unordered_map可以是无序的哈希表来使用。&lt;/li&gt;
&lt;li&gt;每日一题，力扣2549.统计桌面上不同的数字，这是一个可以用简单枚举法完成的问题，但是因为老是先看答案，我已经丧失了思考的过程，要重新锻炼我的编程能力。学习到通过accumulate函数将vector首位累加，不必再使用for遍历完成。此外这道题侧面告诉我，使用数学公式进行简化会更有效果。只有n==1的情况下输出1，其他情况n-1。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总体来说，欠缺的东西还很多，离测试开发的面试要求可能还达不到，加油变强吧少年。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>2024.3.24</title>
        <link>https://yotom131.github.io/post/2024.3.24/</link>
        <pubDate>Tue, 02 Apr 2024 14:01:26 +0800</pubDate>
        
        <guid>https://yotom131.github.io/post/2024.3.24/</guid>
        <description>&lt;h2 id=&#34;324日记&#34;&gt;
    &lt;a href=&#34;#324%e6%97%a5%e8%ae%b0&#34;&gt;#&lt;/a&gt;
    3.24日记
&lt;/h2&gt;&lt;p&gt;​		有一些内容昨天忘了提，首先是hash表查找元素可以通过auto it = hash.find(&amp;ldquo;key&amp;rdquo;)，然后判断it是否是hash.end()来确定是否存在这个键。接着他的遍历方式是for(auto it = hash.bedin(); it!= hash.end(); ++it)，或者for(const auto&amp;amp; pair : myMap) 这样的方式遍历，通过hash-&amp;gt;first, hash-&amp;gt;second这样来访问键值对，通过hash.erase()来删除指定键的元素，通过hash.insert(make_pair(&amp;ldquo;key&amp;rdquo;, val))的方式或者hash.emplace(&amp;ldquo;key&amp;rdquo;, val)的方式来添加元素。&lt;/p&gt;
&lt;p&gt;​		此外，另一个常用的vector容器，可以用for(int element : vec)这样的方式遍历，也可以用索引值for(size_t i = 0; i &amp;lt; vec.size(); i++)这样的方式来遍历。此外还有迭代器，但那个接触不多，可以先不用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;今天第一道题目是hash表的延申，字母异位词分组，目前水平还是太低了，借助GPT倒是完成了，我的思路是把相同字母的值用键值对的方式存起来，哪些字母组对应了一些值的数组，最后通过把键值对的值赋值给二维向量解决。继续加油吧。&lt;/li&gt;
&lt;li&gt;今天第二道题目是有效的括号，属于栈的应用，题目完美符合栈的特点，粗心的错误是在于stk.push(*it)时候，注意根据类型push不同的符号。&lt;/li&gt;
&lt;li&gt;今天上午学习了归并排序，并复习了昨天的一些题目，许多题目才一天就有些生疏不知道如何下手了，需要在学习的同时加强巩固。归并的思路是先递归再合并，合并的时候通过双指针指向两组数据的开头，通过对比大小合并，然后将临时数组的值还给原数组，最终完成算法。&lt;/li&gt;
&lt;li&gt;顺着合并的思路下午学习了合并K和升序链表，学到了许多新的知识，比如创建虚拟表头，然后删除等，最后重新学习了下vector的几个成员函数，front(), at(), size(), empty(), back(), begin(), end()。并且接着学习到了可以通过int* arr = new int 这样的形式给指针分配动态内存。最后学习了递归方法，希望能常看看这些题目.&lt;/li&gt;
&lt;li&gt;然后是一些DP问题，最少的硬币数目，不同路径，两种dp问题，最优解和计数。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>2024.3.25</title>
        <link>https://yotom131.github.io/post/2024.3.25/</link>
        <pubDate>Tue, 02 Apr 2024 14:01:26 +0800</pubDate>
        
        <guid>https://yotom131.github.io/post/2024.3.25/</guid>
        <description>&lt;h2 id=&#34;325&#34;&gt;
    &lt;a href=&#34;#325&#34;&gt;#&lt;/a&gt;
    3.25
&lt;/h2&gt;&lt;p&gt;​		今天早上起来最后学习了一会计算机网络相关的知识，重温了一些算法，我对这些算法的记忆还不够深刻，4月初将迎来蓝桥杯，在那个时候需要一定的功底去发展，最好能打一个国奖，这样子对于之后的应聘应该会有很多帮助。&lt;/p&gt;
&lt;p&gt;​		下午进行了面试，出人意料的是没有考许多八股文，基本上是我自己在阐述。有问到深度学习、transfomer机制这些东西，这些事面试官比较感兴趣的，但我在过程中的表现只能说比较的浅薄，最后捏了一个会的快排，这个让我看见似乎面试官并不会看到我的桌面，后面如果有问题也许可以使用查的方式去完成。但胜任岗位方面需要了解游戏项目的测试自动化、多注意力机制、transformer这些东西，可能会更加地吸引面试官的注意力，就像他们在招聘的时候写着图像处理原理，计算机图形学相关能力。这次面试一直没通知我过，很有可能是在排序中，我并没有表现得那么出色，如果过了，下轮面试在复习好基础后可以着重去了解测试自动化和多注意力机制这方面的东西，不然口头讲述实在是空白无力，而且后面还要面三次。&lt;/p&gt;
&lt;p&gt;​		如果没有过的话，一方面来说是一场悲报，因为这次面试并不像常规面试一样，而是着重挑了面试官自己想了解的部分，而这些部分我自己属于半懂不懂的状态。后面的反问环节也没有提前准备，只能说下次好好准备吧，这次没过的话其实并不意外，虽然我自己感觉良好，但事实上并没有给出面试官想要的答案。&lt;/p&gt;
&lt;p&gt;​		今天再刷两道题，然后结束！明天开始多补补计算机网络和操作系统的知识，以免后面考到了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;今晚因为打卡睡了一道题目，128.最长连续序列，哈希表来做。&lt;/li&gt;
&lt;li&gt;第二题也是同理，找到序列中第一个不重复数字的序号，哈希表，明天弄懂。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>2024.3.26</title>
        <link>https://yotom131.github.io/post/2024.3.26/</link>
        <pubDate>Tue, 02 Apr 2024 14:01:26 +0800</pubDate>
        
        <guid>https://yotom131.github.io/post/2024.3.26/</guid>
        <description>&lt;h2 id=&#34;326&#34;&gt;
    &lt;a href=&#34;#326&#34;&gt;#&lt;/a&gt;
    3.26
&lt;/h2&gt;&lt;p&gt;​		今天一早上就收到了面试通过的消息，老实说十分激动，并且很期待下一次面试，但因为基础一般的原因，不是很清楚下次面试还会不会这样了解项目情况而少了解基础，总之都得练练，刷题方面的话，日常做两道题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;昨天的两道哈希表的题目进行了完成，了解到set的insert插入和count统计，并且知道set是存储唯一值的。&lt;/li&gt;
&lt;li&gt;移动0， 卡了一会，正确思路是把非0数挨个移到前面去，面试后面一天要重新复习。&lt;/li&gt;
&lt;li&gt;移掉K位数字，没做出来，应该是贪心+单调栈，贪心算法不明白是什么，这是个缺点，今晚尽量明白。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>2024.4.2</title>
        <link>https://yotom131.github.io/post/2024.4.2/</link>
        <pubDate>Tue, 02 Apr 2024 14:01:26 +0800</pubDate>
        
        <guid>https://yotom131.github.io/post/2024.4.2/</guid>
        <description>&lt;h1 id=&#34;42&#34;&gt;
    &lt;a href=&#34;#42&#34;&gt;#&lt;/a&gt;
    4.2
&lt;/h1&gt;&lt;h3 id=&#34;腾讯测开三面总结&#34;&gt;
    &lt;a href=&#34;#%e8%85%be%e8%ae%af%e6%b5%8b%e5%bc%80%e4%b8%89%e9%9d%a2%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;
    腾讯测开三面总结：
&lt;/h3&gt;&lt;p&gt;​		4.1的面试凉的很透彻，明明就差最后一步了，哎。计算机基础没打牢固，c++基础没有打牢固，从这两方面入手抓吧。&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;
    &lt;a href=&#34;#c&#34;&gt;#&lt;/a&gt;
    C++:
&lt;/h3&gt;&lt;h4 id=&#34;指针和引用&#34;&gt;
    &lt;a href=&#34;#%e6%8c%87%e9%92%88%e5%92%8c%e5%bc%95%e7%94%a8&#34;&gt;#&lt;/a&gt;
    指针和引用：
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//定义和声明
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//此处是指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//此处是引用，相当于别称
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ref &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;&lt;span style=&#34;color:#75715e&#34;&gt;//引用相当于别称
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用和操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr;&lt;span style=&#34;color:#75715e&#34;&gt;//获取指针指向的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x;&lt;span style=&#34;color:#75715e&#34;&gt;//获取x的地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; newValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ref;&lt;span style=&#34;color:#75715e&#34;&gt;//获取引用的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;空值和空引用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指针可以为空（nullptr）。&lt;/p&gt;
&lt;p&gt;引用则必须在声明时初始化，且不能后续改变引用对象，因此没有空引用的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可变性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指针可以改变指向至不同的内存地址。&lt;/p&gt;
&lt;p&gt;引用一旦被初始化，将一直引用同一个对象，不能改变，值可以跟着引用对象改变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用途：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指针通常用于动态内存分配、数组操作、函数参数传递。&lt;/p&gt;
&lt;p&gt;引用通常用于函数参数传递、操作符重载以及创建别名。&lt;/p&gt;
&lt;h4 id=&#34;数据类型&#34;&gt;
    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;
    数据类型
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;整形：short int long和long long&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;c++数据长度标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;short至少16位，通常为16位。&lt;/li&gt;
&lt;li&gt;int至少和short一样长，通常为32位。&lt;/li&gt;
&lt;li&gt;long至少32位，且至少和int一样长，通常为32位。&lt;/li&gt;
&lt;li&gt;long long至少64位，且至少和long一样长，通常为64位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用8位字节的系统中，1 byte = 8 bit&lt;/p&gt;
&lt;p&gt;可以根据sizeof()来判断数据类型的长度：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; bytes. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;short is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; bytes. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;头文件climits定义了符号常量：例如INT_MAX代表int最大值，INT_MIN代表int最小值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;无符号类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不储存负数值的整形，可以增大变量存储的最大值，数据长度一致。&lt;/p&gt;
&lt;h4 id=&#34;关键字&#34;&gt;
    &lt;a href=&#34;#%e5%85%b3%e9%94%ae%e5%ad%97&#34;&gt;#&lt;/a&gt;
    关键字
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;const关键字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;被const修饰的值不能改变，只读变量。必须在定义的时候就给他赋初值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 常量指针（底层const）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个指针，指向一个只读的对象，不能通过常量指针来改变这个对象的值。常量指针强调的是指针所指对象的不可改变性。&lt;/p&gt;
&lt;p&gt;特点：*靠近变量名。&lt;/p&gt;
&lt;p&gt;形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;const 数据类型 *指针变量 = 变量名&lt;/li&gt;
&lt;li&gt;数据类型 const *指针变量 = 变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//更改:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//错误：只读对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//正确
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 指针常量（顶层const）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个指针，值只能在定义的时候初始化，其他地方不能改变。强调指针的不可改变性。&lt;/p&gt;
&lt;p&gt;特点：*靠近变量类型。&lt;/p&gt;
&lt;p&gt;形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据类型 * const 指针变量 = 变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//更改：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;temp1;&lt;span style=&#34;color:#75715e&#34;&gt;//错误
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//正确
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;static关键字&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>K8s</title>
        <link>https://yotom131.github.io/post/k8s/</link>
        <pubDate>Tue, 02 Apr 2024 14:01:26 +0800</pubDate>
        
        <guid>https://yotom131.github.io/post/k8s/</guid>
        <description>&lt;p&gt;123&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
